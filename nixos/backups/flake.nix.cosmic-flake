{
  description = "NixOS configuration with stable Hyprland and Cosmic session enabled";

  inputs = {
    nixpkgs = {
      url = "nixpkgs/nixos-24.11";
    };
    nixpkgs.follows = "nixos-cosmic/nixpkgs-stable";
    nixos-cosmic.url = "github:lilyinstarlight/nixos-cosmic";
  };

  outputs = { self, nixpkgs, nixos-cosmic, ... }:
    let
      lib = nixpkgs.lib;
      system = "x86_64-linux";
    in {
      nixosConfigurations = {
        nixos = lib.nixosSystem {
          system = system;
          modules = [
            {
              nix.settings = {
                substituters = [ "https://cosmic.cachix.org/" ];
                trusted-public-keys = [
                  "cosmic.cachix.org-1:Dya9IyXD4xdBehWjrkPv6rtxpmMdRel02smYzA85dPE="
                ];
              };

              nixpkgs.overlays = [
                (final: prev: {
                  unityhub = prev.unityhub.overrideAttrs (oldAttrs: rec {
                    postInstall = (oldAttrs.postInstall or "") + ''
                      wrapProgram $out/bin/unityhub --set ELECTRON_ENABLE_WAYLAND=1
                    '';
                  });
                })
              ];

              # Import custom Hyprland options.
              imports = [
                ({ config, pkgs, lib, ... }: {
                  options.services.hyprland = {
                    enable = lib.mkOption {
                      type = lib.types.bool;
                      default = false;
                      description = "Enable the Hyprland compositor service.";
                    };
                    package = lib.mkOption {
                      type = lib.types.package;
                      default = pkgs.hyprland;
                      description = "Hyprland package to use.";
                    };
                    config = lib.mkOption {
                      type = lib.types.attrs;
                      default = {};
                      description = "Hyprland configuration (including plugins).";
                    };
                  };

                  config = lib.mkIf config.services.hyprland.enable {
                    systemd.user.services.hyprland = {
                      description = "Hyprland compositor service";
                      after = [ "graphical-session.target" ];
                      wantedBy = [ "graphical-session.target" ];
                      serviceConfig = {
                        ExecStart = "${config.services.hyprland.package}/bin/hyprland";
                      };
                    };
                  };
                })
              ];

              services.hyprland.enable = true;
              services.hyprland.package = nixpkgs.legacyPackages.${system}.hyprland;
              services.hyprland.config = {
                general = { };
                plugins = { };
              };

              environment.variables = {
                MOZ_ENABLE_WAYLAND = "1";
                QT_QPA_PLATFORM = "wayland";
              };

              # Create a Cosmic session desktop file in the Wayland sessions directory.
              system.activationScripts.cosmicSession = {
                text = ''
                  mkdir -p /usr/share/wayland-sessions
                  cat > /usr/share/wayland-sessions/cosmic.desktop <<EOF
[Desktop Entry]
Name=Cosmic
Comment=Cosmic Session
Exec=cosmic-session
Type=Application
EOF
                '';
              };

              # Optionally, if Cosmic does not already provide its executable in PATH,
              # add it to your system packages. For example:
              #
              # environment.systemPackages = with pkgs; [
              #   nixos-cosmic.packages.${system}.cosmic-session
              # ];
            }

            # Import the cosmic module for its additional configuration.
            nixos-cosmic.nixosModules.default

            # Import your additional configuration.
            ./configuration.nix
          ];
        };
      };
    };
}
